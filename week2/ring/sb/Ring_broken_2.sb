{
    "nodes": [
        {
            "datums": [
                {
                    "expr": "-2",
                    "name": "xmin",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "2",
                    "name": "xmax",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "-2",
                    "name": "ymin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "2",
                    "name": "ymax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "-2",
                    "name": "zmin",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "2",
                    "name": "zmax",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "40",
                    "name": "x_period",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "40",
                    "name": "y_period",
                    "type": "float",
                    "uid": 7
                },
                {
                    "expr": "40",
                    "name": "z_period",
                    "type": "float",
                    "uid": 8
                },
                {
                    "expr": "0.2",
                    "name": "thickness",
                    "type": "float",
                    "uid": 9
                },
                {
                    "expr": "\u0012fab.types.Shape('a= abs( sin(X / 0.15707963267948966)*cos(Y / 0.15707963267948966) + sin(Y / 0.15707963267948966)*cos(Z /0.15707963267948966) + sin(Z / 0.15707963267948966)*cos(X / 0.15707963267948966)) - 0.2;am__f1aa-f-2X-Xf2a-f-2Y-Yf2a-f-2Z-Zf2',float('-2.000000'),float('-2.000000'),float('-2.000000'),float('2.000000'),float('2.000000'),float('2.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 10
                }
            ],
            "inspector": [
                -207,
                -245
            ],
            "name": "g0",
            "script": [
                "import fab",
                "import math",
                "",
                "#https://en.wikipedia.org/wiki/Gyroid",
                "title('Gyroid')",
                "",
                "input('xmin', float)",
                "input('xmax', float)",
                "input('ymin', float)",
                "input('ymax', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "",
                "input('x_period', float)",
                "input('y_period', float)",
                "input('z_period', float)",
                "input('thickness', float)",
                "",
                "x_factor = 2 * math.pi / x_period",
                "y_factor = 2 * math.pi / y_period",
                "z_factor = 2 * math.pi / z_period",
                "",
                "fn = \"= abs( sin(X / %(x_factor)s)*cos(Y / %(y_factor)s) + sin(Y / %(y_factor)s)*cos(Z /%(z_factor)s) + sin(Z / %(z_factor)s)*cos(X / %(x_factor)s)) - %(thickness)s;\" % locals()",
                "",
                "output('shape', fab.shapes.function_prefix_xyz(fn, xmin, xmax,",
                "                                                   ymin, ymax,",
                "                                                   zmin, zmax))",
                ""
            ],
            "uid": 0
        },
        {
            "datums": [
                {
                    "expr": "0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "1.6",
                    "name": "R",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "0.4",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf0-Yf0-Zf0-r+q-f1.6r+qXqYqZf0.4',float('-2.000000'),float('-2.000000'),float('-0.400000'),float('2.000000'),float('2.000000'),float('0.400000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                -198,
                106
            ],
            "name": "t0",
            "script": [
                "# Neil Gershenfeld 1/25/15",
                "# Matt Keeter 5/31/15",
                "",
                "import fab",
                "import math",
                "",
                "title('Torus (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('R', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.torus_z(x, y, z, R, r))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "     (x,",
                "      math.sin(i/36. * 2*math.pi) * r + y + R,",
                "      math.cos(i/36. * 2*math.pi) * r + z)",
                "    for i in range(36)], close=True)",
                "sb.ui.wireframe([",
                "     (math.sin(i/36. * 2*math.pi) * R + x,",
                "      math.cos(i/36. * 2*math.pi) * R + y,",
                "      z)",
                "    for i in range(36)], close=True)",
                "sb.ui.wireframe([(x, y, z), (x, y, z + R + r)])",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x, y + R, z, drag=(None, R, None))",
                "sb.ui.point(x, y + R + r, z, drag=(None, r, None))",
                "",
                ""
            ],
            "uid": 1
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__0.__10]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__1.__5]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aa= abs( sin(X / 0.15707963267948966)*cos(Y / 0.15707963267948966) + sin(Y / 0.15707963267948966)*cos(Z /0.15707963267948966) + sin(Z / 0.15707963267948966)*cos(X / 0.15707963267948966)) - 0.2;am__f1aa-f-2X-Xf2a-f-2Y-Yf2a-f-2Z-Zf2m-Xf0-Yf0-Zf0-r+q-f1.6r+qXqYqZf0.4',float('-2.000000'),float('-2.000000'),float('-0.400000'),float('2.000000'),float('2.000000'),float('0.400000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                128,
                -123
            ],
            "name": "i0",
            "script": [
                "import fab.types",
                "",
                "title('Intersection')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & b)",
                ""
            ],
            "uid": 2
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__2.__2]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0012fab.types.Shape('aa= abs( sin(X / 0.15707963267948966)*cos(Y / 0.15707963267948966) + sin(Y / 0.15707963267948966)*cos(Z /0.15707963267948966) + sin(Z / 0.15707963267948966)*cos(X / 0.15707963267948966)) - 0.2;am__f1aa-f-2X-Xf2a-f-2Y-Yf2a-f-2Z-Zf2m-Xf0-Yf0-Zf0-r+q-f1.6r+qXqYqZf0.4',float('-2.000000'),float('-2.000000'),float('-0.400000'),float('2.000000'),float('2.000000'),float('0.400000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                }
            ],
            "inspector": [
                442,
                -126
            ],
            "name": "m0",
            "script": [
                "import fab",
                "",
                "title('Mesh (.stl)')",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', shape)",
                "",
                "sb.export.stl(shape)",
                ""
            ],
            "uid": 3
        }
    ],
    "protocol": 6,
    "type": "sb"
}
